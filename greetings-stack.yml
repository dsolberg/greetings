---
  AWSTemplateFormatVersion: "2010-09-09"
  Description: "Greetings Stack"
  Resources: 
    Role:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version : "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          -
            PolicyName: "GreetingsPolicy"
            PolicyDocument:
              Version : "2012-10-17"
              Statement:
                 - 
                  Effect: "Allow"
                  Action: logs:*
                  Resource: "*"
    RestApi:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
          Name: "Greetings API"
          FailOnWarnings : true
    LambdaPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: "lambda:invokeFunction"
        FunctionName: !GetAtt [ "Lambda", "Arn" ]
        Principal: "apigateway.amazonaws.com"
        SourceArn: !Join [ "", [ "arn:aws:execute-api:", !Ref "AWS::Region",":", !Ref "AWS::AccountId",":", !Ref "RestApi", "/*" ] ]
    Lambda:
      Type: "AWS::Lambda::Function"
      Properties: 
        Code:
          ZipFile: >
            exports.handler = (event, context, callback) => {
              const name = event.name || 'World';
              const response = {greeting: `Hello, ${name}!`};
              callback(null, response);
            };
        Handler: "index.handler"
        MemorySize: 128
        Role: !GetAtt ["Role", "Arn"]
        Runtime: "nodejs4.3"
        Timeout: 5
    Deployment: 
      DependsOn: "GetRequest"
      Type: "AWS::ApiGateway::Deployment"
      Properties: 
        RestApiId: 
          Ref: "RestApi"
        StageName: "DummyStage"
    LatestStage: 
      Type: "AWS::ApiGateway::Stage"
      Properties:
        DeploymentId: {"Ref": "Deployment"}
        RestApiId: {"Ref": "RestApi"}
        StageName: "LATEST"
    StagingStage: 
      Type: "AWS::ApiGateway::Stage"
      Properties:
        DeploymentId: {"Ref": "Deployment"}
        RestApiId: {"Ref": "RestApi"}
        StageName: "Staging"
    Resource:
      Type: "AWS::ApiGateway::Resource"
      Properties:
          RestApiId: {"Ref": "RestApi"}
          ParentId: {"Fn::GetAtt": ["RestApi", "RootResourceId"]}
          PathPart: "greeting"
    GetRequest:
      DependsOn: "LambdaPermission"
      Type: "AWS::ApiGateway::Method"
      Properties:
        AuthorizationType: "NONE"
        HttpMethod: "GET"        
        Integration:
          Type: "AWS"
          IntegrationHttpMethod: "POST"
          Uri:  {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["Lambda", "Arn"]}, "/invocations"]]}
          IntegrationResponses:
            -
              StatusCode: 200
          RequestTemplates:
            application/json: {"Fn::Join" : ["", ["{","\"name\": \"$input.params('name')\"","}"]]}
        RequestParameters:
          method.request.querystring.name: false
        ResourceId: !Ref "Resource"
        RestApiId: !Ref "RestApi"
        MethodResponses:
          -
            StatusCode: 200